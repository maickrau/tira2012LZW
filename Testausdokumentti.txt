1.10 testattu pakkauksen aikaa ja pakatun tiedoston kokoa eri tiedostoilla
testaus laitoksen koneella joten ajat erisuuruisia kuin aikaisemmissa testauksissa

Tiedosto                   Koko      Koko pakattuna  Pakkaussuhde  Aika pakkaukseen   Aika avaukseen
LZW.htm                    80,9 kt   33,3 kt         0,412         364 ms             671 ms
hash.html                  3,3 kt    2,0 kt          0,607         62 ms              37 ms
aaa.txt                    80,8 kt   471 t           0,006         877 ms             43 ms
LZW_Data_Compression.html  291,4 kt  95,8 kt         0,329         1573 ms            2910 ms
karhu.bmp                  201,4 kt  166,0 kt        0,824         5273 ms            2939 ms

26.9 testattu omien tietorakenteiden nopeutta
pakkauksessa hajautustaulukko jossa avaimena string ja arvona int
avauksessa dynaaminen taulukko jossa arvona string

testitiedosto LZW.htm (80 kt)
java Tira2012LZW p LZW.htm tulos.txt
pakkaus 3959 ms

java Tira2012LZW a tulos.txt LZW2.htm
avaus 3582 ms

hajautustaulukko hitaampi kuin javan valmis HashMap, dynaaminen taulukko yht‰ nopea kuin javan ArrayList

24.9 testattu pakkaajan ja avaajan nopeutta javan valmiilla tietorakenteilla.
ohjelma tarvitsee tietorakenteen johon on nopea lis‰t‰ alkioita ja etsi‰ alkioita.
pakkaajalle k‰y rakenteet josta etsit‰‰n stringill‰ ja palautetaan int:
hashmap lisays ~O(1) etsiminen ~O(1)
treemap lisays O(log n) etsiminen O(log n)
avaajalle k‰y rakenteet josta etsit‰‰n intill‰ ja palautetaan string, edellisten lis‰ksi:
arraylist lisays ~O(1) etsiminen O(1)

testitiedosto LZW.htm (80 kt)
mainiin lis‰tty koodia ajan mittaamiseen
java Tira2012LZW p LZW.htm tulos.txt
hashmap pakkaukseen kesti 3657 ms
treemap pakkaukseen kesti 4062 ms

java Tira2012LZW a tulos.txt LZW2.htm
hashmap avaukseen kesti 3641 ms
treemap avaukseen kesti 3734 ms
arraylist avaukseen kesti 3578 ms

Hajautustaulukko on nopein pakkauksessa, oma tietorakenne kannattaa tehd‰ sen perusteella.
Dynaaminen taulukko on nopein avaamisessa.

18.9 testattu bittimuuntajan toimivuus eri bitti-per-merkki-m‰‰r‰ll‰
sama testauskoodi kuin 8.9, bittim‰‰r‰‰ vaihdeltu muuttamalla bittimuuntajien konstruktoreja
tulos 12 bitill‰:
aaaaaaabcdefdefaa
 a c@eaa 
aaaaaaabcdefdefaa

13 bitill‰:
aaaaaaabcdefdefaa
@1??e0A?? 
aaaaaaabcdefdefaa

9 bitill‰:
aaaaaaabcdefdefaa
0? &??e3A?? 
aaaaaaabcdefdefaa

15 bitill‰:
aaaaaaabcdefdefaa
 ?@?2 e ?0
aaaaaaabcdefdefaa

muuntaminen merkeist‰ biteiksi ja biteist‰ merkeiksi toimii molempiin suuntiin

8.9 testattu pakkauksen ja avauksen toimivuus
testauskoodi mainissa:

        String pakattavaksi = "aaaaaaabcdefdefaa";
        System.out.println(pakattavaksi);
        Pakkaaja pakkaaja = new Pakkaaja();
        String pakattu = pakkaaja.pakkaa(pakattavaksi);
        System.out.println(pakattu);
        Avaaja avaaja = new Avaaja();
        String avattu = avaaja.avaa(pakattu);
        System.out.println(avattu);

jos "avattu" ja "pakattavaksi" ovat erilaisia niin pakkaus/avaus ei toimi
tulos:

aaaaaaabcdefdefaa
 97 256 257 97 98 99 100 101 102 262 102 256
aaaaaaabcdefdefaa

toimii